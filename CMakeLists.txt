cmake_minimum_required(VERSION 3.19 FATAL_ERROR)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/CMake")

include(Hunter/HunterInit)

project(p7Zip VERSION 16.0.2 LANGUAGES CXX C ASM)

include(ThirdPartyLibraries)
include(SourceFiles)

list(TRANSFORM P7ZIP_C_SOURCE_FILES PREPEND "C/")
list(TRANSFORM P7ZIP_CPP_SOURCE_FILES PREPEND "CPP/")
set(P7ZIP_C_HEADER_FILES ${P7ZIP_C_SOURCE_FILES})
list(FILTER P7ZIP_C_HEADER_FILES INCLUDE REGEX ".*\\.h$")
set(P7ZIP_CPP_HEADER_FILES ${P7ZIP_CPP_SOURCE_FILES})
list(FILTER P7ZIP_CPP_HEADER_FILES INCLUDE REGEX ".*\\.h$")
set(P7ZIP_ALL_SOURCE_FILES ${P7ZIP_C_SOURCE_FILES} ${P7ZIP_CPP_SOURCE_FILES})
set(P7ZIP_ALL_HEADER_FILES ${P7ZIP_C_HEADER_FILES} ${P7ZIP_CPP_HEADER_FILES})

add_library(${PROJECT_NAME} STATIC ${P7ZIP_ALL_SOURCE_FILES})

target_link_libraries(${PROJECT_NAME} PUBLIC pthreads-win32::pthreads-win32)

include(GNUInstallDirs)

set(CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
set(GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
set(VERSION_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake")
set(PROJECT_CONFIG "${GENERATED_DIR}/${PROJECT_NAME}Config.cmake")
set(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
set(NAMESPACE "${PROJECT_NAME}::")

include(CMakePackageConfigHelpers)

write_basic_package_version_file(
	"${VERSION_CONFIG}" COMPATIBILITY SameMajorVersion
)

configure_package_config_file(
	"cmake/Config.cmake.in"
	"${PROJECT_CONFIG}"
	INSTALL_DESTINATION "${CONFIG_INSTALL_DIR}"
)

install(
	TARGETS ${PROJECT_NAME}
	EXPORT "${TARGETS_EXPORT_NAME}"
	LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
	ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
	RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
	INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
)

foreach(_HEADER_FILE ${P7ZIP_ALL_HEADER_FILES})
	string(REGEX MATCH ".*[/\\]" _HEADER_DIRECTORY_PATH ${_HEADER_FILE})
	install(FILES ${_HEADER_FILE} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/${_HEADER_DIRECTORY_PATH})
endforeach()

install(
	FILES "${PROJECT_CONFIG}" "${VERSION_CONFIG}"
	DESTINATION "${CONFIG_INSTALL_DIR}"
)

install(
	EXPORT "${TARGETS_EXPORT_NAME}"
	NAMESPACE "${NAMESPACE}"
	DESTINATION "${CONFIG_INSTALL_DIR}"
)
